package com.procuone.mit_kdt.controller;

import com.procuone.mit_kdt.dto.ContractDTO;
import com.procuone.mit_kdt.dto.InspectionDTO;
import com.procuone.mit_kdt.dto.PurchaseOrderDTO;
import com.procuone.mit_kdt.service.ProgressInspectionService;
import com.procuone.mit_kdt.service.PurchaseOrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping("/purchaseOrder")
public class PurchaseOrderController {
    @Autowired
    private PurchaseOrderService purchaseOrderService;
    @Autowired
    private ProgressInspectionService progressInspectionService;
    @GetMapping("/purchaseOrders")
    public String purchaseOrders(
            @RequestParam(defaultValue = "0") int page1,
            @RequestParam(defaultValue = "7") int size1,
            @RequestParam(defaultValue = "0") int page2,
            @RequestParam(defaultValue = "7") int size2,
            Model model) {
        // 위쪽 테이블: 자동생성 상태인 항목
        Page<PurchaseOrderDTO> autoGeneratedOrders = purchaseOrderService.getOrdersByStatus("자동생성", page1, size1);
        model.addAttribute("autoOrders", autoGeneratedOrders.getContent());
        model.addAttribute("autoTotalPages", autoGeneratedOrders.getTotalPages());
        model.addAttribute("autoCurrentPage", autoGeneratedOrders.getNumber());

        // 아래쪽 테이블: 발주완료 상태인 항목
        Page<PurchaseOrderDTO> completedOrders = purchaseOrderService.getOrdersByStatus("발주완료", page2, size2);
        model.addAttribute("completedOrders", completedOrders.getContent());
        model.addAttribute("completedTotalPages", completedOrders.getTotalPages());
        model.addAttribute("completedCurrentPage", completedOrders.getNumber());

        // 디버깅 로깅
        System.out.println("자동 생성 리스트: " + autoGeneratedOrders.getContent());
        System.out.println("발주 완료 리스트: " + completedOrders.getContent());

        return "purchaseOrder/purchaseOrders";
    }

    @PostMapping("/order")
    public String completeOrders(@RequestParam List<String> orderIds) {
        // 발주 처리
        purchaseOrderService.completeOrders(orderIds);

        return "redirect:/purchaseOrder/purchaseOrders";
    }

    @GetMapping("/progressInspection")
    public String progressInspection() {
        return "purchaseOrder/progressInspection";
    }

    @GetMapping("/procurementPlanView")
    public String procurementPlanView() {
        return "purchaseOrder/procurementPlanView";
    }


    @GetMapping("/purchaseOrders/ajax")
    @ResponseBody
    public Map<String, Object> filterOrders(
            @RequestParam String tableType,
            @RequestParam(required = false) String keyword,
            @RequestParam(required = false) String type,
            @RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate startDate,
            @RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate endDate) {

        Map<String, Object> response = new HashMap<>();
        List<PurchaseOrderDTO> orders;

        if ("auto".equals(tableType)) {
            orders = purchaseOrderService.searchOrders("자동생성", keyword, type, startDate, endDate);
            response.put("auto", orders);
        } else if ("completed".equals(tableType)) {
            orders = purchaseOrderService.searchOrders("발주완료", keyword, type, startDate, endDate);
            response.put("completed", orders);
        } else {
            response.put("error", "Invalid table type");
        }
        return response;
    }

    @GetMapping("/searchOrders")
    public String searchOrders(
            @RequestParam(required = false) String keywordType,
            @RequestParam(required = false) String keyword,
            @RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate startDate,
            @RequestParam(required = false) @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate endDate,
            Model model) {

        // 검색 로직 수행
        List<PurchaseOrderDTO> searchResults = purchaseOrderService.searchOrders(
                "자동생성", keywordType, keyword, startDate, endDate);

        model.addAttribute("searchResults", searchResults);
        model.addAttribute("keywordType", keywordType);
        model.addAttribute("keyword", keyword);
        model.addAttribute("startDate", startDate);
        model.addAttribute("endDate", endDate);

        return "purchaseOrder/purchaseOrders";
    }

    @GetMapping("/purchaseOrder/{purchaseOrderCode}")
    public String viewPurchaseOrder(@PathVariable String purchaseOrderCode, Model model) {
        PurchaseOrderDTO purchaseOrderDTO = purchaseOrderService.getpurchaseOrderById(purchaseOrderCode);

        model.addAttribute("purchaseOrder", purchaseOrderDTO);

        return "purchaseOrder"; // HTML 템플릿 파일 이름
    }
}